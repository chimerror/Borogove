#n -p -v 0.13.5-beta Wyam.Markdown
#n -p -v 0.13.5-beta Wyam.Razor

using System.Configuration;
using System.Data.Entity;
using System.Linq;
using Borogove;
using Borogove.DataAccess;
using Borogove.Model;

public static class Helpers
{
        static Helpers()
        {
            DbConfiguration.SetConfiguration(new PersisterDbConfiguration());

            Database.SetInitializer(
                new MigrateDatabaseToLatestVersion<WorkContext, Borogove.DataAccess.Migrations.Configuration>(true));
        }

        public static readonly string WebsiteRootUrl = Environment.GetEnvironmentVariable("WebsiteRootUrl") ?? "https://localhost:44342";
        public static readonly string WebsiteLoginPage = $"{WebsiteRootUrl}/{ Environment.GetEnvironmentVariable("WebsiteLoginPage") ?? "site/login.html" }";
        public static readonly string WebsiteLogoutPage = $"{WebsiteRootUrl}/{ Environment.GetEnvironmentVariable("WebsiteLogoutPage") ?? "Logout.ashx" }";
        public static readonly string WorkContextConnectionString = Environment.GetEnvironmentVariable("BorogoveConnectionString") ?? WorkMetadataPersister.DefaultDatabaseName;
        public static readonly string AuthorizationClientId = Environment.GetEnvironmentVariable("Auth0ClientId") ?? "bZmoX9XKDg68wfSAqbZK4Km8v76ctkO3";
        public static readonly string AuthorizationDomain = Environment.GetEnvironmentVariable("Auth0Domain") ?? "chimerror.auth0.com";
        public static readonly string AuthorizationManagementToken = Environment.GetEnvironmentVariable("Auth0ManagementToken");

        public static TagSet GetTagSet()
        {
            using (var context = new WorkContext(WorkContextConnectionString))
            {
                    return context.GetTagSet();
            }
        }

        public static FilePath CombineFilePathAfter(this DirectoryPath directory, FilePath file, string relativePathStart)
        {
            var relativeSegments = file.Segments.SkipWhile(s => !s.Equals(relativePathStart)).ToList();
            var newDirectoryPath = directory;
            for (int currentSegment = 0; currentSegment < relativeSegments.Count - 1; currentSegment++)
            {
                newDirectoryPath = newDirectoryPath.Combine(relativeSegments[currentSegment]);
            }
            return newDirectoryPath.CombineFile(relativeSegments.Last());
        }

        public static DirectoryPath InputFolder { get; set; }
        public static DirectoryPath OutputFolder { get; set; }
}

InitialMetadata.Add(Borogove.WebsiteMetadataNames.WebsiteRootUrl, Helpers.WebsiteRootUrl);
InitialMetadata.Add(Borogove.WebsiteMetadataNames.WebsiteLoginPage, Helpers.WebsiteLoginPage);
InitialMetadata.Add(Borogove.WebsiteMetadataNames.WebsiteLogoutPage, Helpers.WebsiteLogoutPage);
InitialMetadata.Add(Borogove.WorkMetadataYamlUnpacker.DefaultTagSetKey, Helpers.GetTagSet());
InitialMetadata.Add(Borogove.AuthorizationMetadataNames.ClientId, Helpers.AuthorizationClientId);
InitialMetadata.Add(Borogove.AuthorizationMetadataNames.Domain, Helpers.AuthorizationDomain);

Pipelines.Add("Templates",
              Execute(ctx => { Helpers.InputFolder = ctx.FileSystem.RootPath.Combine("input"); Helpers.OutputFolder = ctx.FileSystem.OutputPath; return null; }),
              CopyFiles(@"..\..\Borogove.Templates\*.*")
                  .To(x => Helpers.InputFolder.GetFilePath(x.Path)),
              CopyFiles(@"..\..\Borogove.Templates\js\**")
                  .Where(x => !x.Path.FullPath.Contains("intellisense"))
                  .To(x => Helpers.OutputFolder.CombineFilePathAfter(x.Path, "js")),
              CopyFiles(@"..\..\Borogove.Templates\img\**")
                  .To(x => Helpers.OutputFolder.CombineFilePathAfter(x.Path, "img"))
);

Pipelines.Add("Works",
              ReadFiles(@"**\*.md"),
              WorkMetadataYamlUnpacker(),
              AuthorizationMetadataResolver(Helpers.AuthorizationDomain, Helpers.AuthorizationManagementToken, true, true),
              Meta(WorkMetadataCanonicalNames.Path, (doc, _) =>
                  string.Format(@"{0}/{1}.html",
                      doc.Get<string>("RelativeFileDir", string.Empty),
                      doc.Get<string>(WorkMetadataCanonicalNames.Title, doc.Get<string>("SourceFileBase")))
                  .ToLower().Replace(' ', '-')),
              WorkMetadataPersister(Helpers.WorkContextConnectionString),
              Meta(WorkMetadataCanonicalNames.Title, @doc.Get<string>(WorkMetadataCanonicalNames.Title, "Untitled Work")),
              Markdown(),
              Meta("WorkContent", @doc.Content),
              Merge(
                  ReadFiles((doc, _) => string.Format(@"{0}\*.cshtml", doc.Get<string>("RelativeFileDir", string.Empty)))
              ).ForEachDocument(),
              Razor(),
              WriteFiles((string)@doc[WorkMetadataCanonicalNames.Path])
);

Pipelines.Add("Home",
              ReadFiles(@"{!_,}*.cshtml"),
              Meta(WorkMetadataCanonicalNames.Path, (doc, _) => $"{ doc.Get<string>("RelativeFilePathBase") }.html"),
              Razor(),
              WriteFiles(".html")
 );
