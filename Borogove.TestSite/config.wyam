Assemblies
        .LoadDirectory(@"..\Borogove\bin\Debug");
===

using System.Data.Entity;
using Borogove;
using Borogove.DataAccess;
using Borogove.Model;

public static class Helpers
{
        static Helpers()
        {
            Database.SetInitializer(new DropCreateDatabaseIfModelChanges<WorkContext>());
        }


        public static readonly string WorkContextConnectionString =
Environment.GetEnvironmentVariable("BorogoveConnectionString") ?? WorkMetadataPersister.DefaultDatabaseName;

        public static TagSet GetTagSet()
        {
                using (var context = new WorkContext(WorkContextConnectionString))
                {
                        return context.GetTagSet();
                }
        }

        public static string InputFolder { get; set; }
}

---

InitialMetadata.Add(Borogove.WorkMetadataYamlUnpacker.DefaultTagSetKey, Helpers.GetTagSet());

Pipelines.Add("Templates",
              Execute(ctx => { Helpers.InputFolder = ctx.InputFolder; return null; }),
              CopyFiles(@"..\..\Borogove.Templates\*.*")
                  .To(x => Path.Combine(Helpers.InputFolder, Path.GetFileName(x)))
);

Pipelines.Add("Posts",
              ReadFiles(@"posts\*.md"),
              WorkMetadataYamlUnpacker(),
              Meta(WorkMetadataCanonicalNames.Path, string.Format(@"posts\{0}.html", ((string)@doc[WorkMetadataCanonicalNames.Title]).ToLower().Replace(' ', '-'))),
              WorkMetadataPersister(Helpers.WorkContextConnectionString),
              Markdown(),
              Meta("Post", @doc.Content),
              Merge(
                  ReadFiles(@"posts\Post.cshtml")
              ),
              Razor(),
              WriteFiles((string)@doc[WorkMetadataCanonicalNames.Path])
);

Pipelines.Add("Home",
              ReadFiles(@"*.cshtml").FromTopDirectoryOnly().Where(x => Path.GetFileName(x)[0] != '_'),
              Razor(),
              WriteFiles(".html")
 );
