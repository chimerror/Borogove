Assemblies
        .LoadDirectory(@"..\Borogove\bin\Debug");
===

using System.Data.Entity;
using Borogove;
using Borogove.DataAccess;
using Borogove.Model;

public static class Helpers
{
        static Helpers()
        {
            Database.SetInitializer(new DropCreateDatabaseIfModelChanges<WorkContext>());
        }


        public static readonly string WorkContextConnectionString =
Environment.GetEnvironmentVariable("BorogoveConnectionString") ?? WorkMetadataPersister.DefaultDatabaseName;

        public static TagSet GetTagSet()
        {
            using (var context = new WorkContext(WorkContextConnectionString))
            {
                    return context.GetTagSet();
            }
        }

        public static FilePath CombineFilePathAfter(this DirectoryPath directory, FilePath file, string relativePathStart)
        {
            var relativeSegments = file.Segments.SkipWhile(s => !s.Equals(relativePathStart)).ToList();
            var newDirectoryPath = directory;
            for (int currentSegment = 0; currentSegment < relativeSegments.Count - 1; currentSegment++)
            {
                newDirectoryPath = newDirectoryPath.Combine(relativeSegments[currentSegment]);
            }
            return newDirectoryPath.CombineFile(relativeSegments.Last());
        }

        public static DirectoryPath InputFolder { get; set; }
        public static DirectoryPath OutputFolder { get; set; }
}

---

InitialMetadata.Add(Borogove.WorkMetadataYamlUnpacker.DefaultTagSetKey, Helpers.GetTagSet());

Pipelines.Add("Templates",
              Execute(ctx => { Helpers.InputFolder = ctx.FileSystem.RootPath.Combine("input"); Helpers.OutputFolder = ctx.FileSystem.OutputPath; return null; }),
              CopyFiles(@"..\..\Borogove.Templates\*.*")
                  .To(x => Helpers.InputFolder.GetFilePath(x.Path)),
              CopyFiles(@"..\..\Borogove.Templates\js\**")
                  .To(x => Helpers.OutputFolder.CombineFilePathAfter(x.Path, "js"))
);

Pipelines.Add("Posts",
              ReadFiles(@"Posts\*.md"),
              WorkMetadataYamlUnpacker(),
              Meta(WorkMetadataCanonicalNames.Path, string.Format(@"Posts/{0}.html", ((string)@doc[WorkMetadataCanonicalNames.Title]).ToLower().Replace(' ', '-'))),
              WorkMetadataPersister(Helpers.WorkContextConnectionString),
              Markdown(),
              Meta("Post", @doc.Content),
              Merge(
                  ReadFiles(@"Posts\post.cshtml")
              ),
              Razor(),
              WriteFiles((string)@doc[WorkMetadataCanonicalNames.Path])
);

Pipelines.Add("Home",
              ReadFiles(@"{!_,}*.cshtml"),
              Razor(),
              WriteFiles(".html")
 );
